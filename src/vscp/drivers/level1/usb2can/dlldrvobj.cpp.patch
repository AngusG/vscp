Index: dlldrvobj.cpp
===================================================================
--- dlldrvobj.cpp	(revision 3328)
+++ dlldrvobj.cpp	(revision 3343)
@@ -55,21 +55,75 @@
 
 ////////////////////////////////////////////////////////////////////////////
 // CDllDrvObj construction
+static long arrayObj[CANAL_USB2CAN_DRIVER_MAX_OPEN];
 
-CDllDrvObj::CDllDrvObj()
+
+CDllDrvObj::CDllDrvObj() : lpvMem(arrayObj), hMapObject(NULL)
 {
 	m_instanceCounter = 0;
 #ifdef WIN32
-	m_objMutex = CreateMutex( NULL, true, "__CANAL_IXXATVCI_MUTEX__" );
+	m_objMutex = CreateMutex( NULL, false, "__CANAL_IXXATVCI_MUTEX__" );
+	DWORD dwResult = LOCK_MUTEX(m_objMutex);
+	if(dwResult == WAIT_ABANDONED)
+	{
+		UNLOCK_MUTEX(m_objMutex);
+		CloseHandle(m_objMutex);		
+		throw "error mutex abandoned";
+	}
+
+            // Create a named file mapping object
+ 
+            hMapObject = CreateFileMapping( 
+                INVALID_HANDLE_VALUE,   // use paging file
+                NULL,                   // default security attributes
+                PAGE_READWRITE,         // read/write access
+                0,                      // size: high 32-bits
+                sizeof(long) * CANAL_USB2CAN_DRIVER_MAX_OPEN,  // size: low 32-bits
+                TEXT("dllusb2canfilemap")); // name of map object
+            if (hMapObject == NULL) 
+			{
+				UNLOCK_MUTEX(m_objMutex);
+				CloseHandle(m_objMutex);
+                throw "error createfilemapping"; 
+			}
+ 
+            // The first process to attach initializes memory
+ 
+            bool fInit = (GetLastError() != ERROR_ALREADY_EXISTS); 
+ 
+            // Get a pointer to the file-mapped shared memory
+ 
+            lpvMem = static_cast<long*>(MapViewOfFile( 
+                hMapObject,     // object to map view of
+                FILE_MAP_WRITE, // read/write access
+                0,              // high offset:  map from
+                0,              // low offset:   beginning
+                0));             // default: map entire file
+            if (lpvMem == NULL) 
+			{
+				UNLOCK_MUTEX(m_objMutex);
+				CloseHandle(m_objMutex);
+                throw "error createfilemapping"; 
+			}
+ 
+            // Initialize memory if this is the first process
+ 
+            if (fInit) 
+			{
+				memset(lpvMem, 0, sizeof(long)*CANAL_USB2CAN_DRIVER_MAX_OPEN);
+			}
+
 #else
 	pthread_mutex_init( &m_objMutex, NULL );
+	//DL: I'm afraid I don't know how to open a memory mapped file under Linux so for lpvMem by default uses a static array address
 #endif
 
 	// Init the driver array
 	for ( int i = 0; i<CANAL_USB2CAN_DRIVER_MAX_OPEN; i++ ) {
-		m_drvObjArray[ i ] = NULL;
+		m_drvObjArray[i] = NULL;
 	}
 
+
 	UNLOCK_MUTEX( m_objMutex );
 }
 
@@ -80,24 +134,23 @@
 	
 	for ( int i = 0; i<CANAL_USB2CAN_DRIVER_MAX_OPEN; i++ )
 	{
-		
-		if ( NULL == m_drvObjArray[ i ] )
-		{
-			
-			CUsb2canObj *pdrvObj =  getDriverObject( i );
-
-			if ( NULL != pdrvObj )
-			{ 
-				pdrvObj->close();	
-				delete m_drvObjArray[ i ];
-				m_drvObjArray[ i ] = NULL; 
-			}
-		}
+		if ( NULL != m_drvObjArray[i] )
+		{ 
+			m_drvObjArray[ i ]->close();	
+			delete m_drvObjArray[ i ];
+			m_drvObjArray[ i ] = NULL; 
+			lpvMem[i] = 0;//inform global space that this driver closed
+		}		
 	}
+#ifdef WIN32
+	UnmapViewOfFile(lpvMem); 
+ 
+    // Close the process's handle to the file-mapping object
+    CloseHandle(hMapObject);
 
 	UNLOCK_MUTEX( m_objMutex );
 
-#ifdef WIN32
+
 	CloseHandle( m_objMutex );
 #else	
 	pthread_mutex_destroy( &m_objMutex );
@@ -123,10 +176,11 @@
 
 	 for ( int i=0; i<CANAL_USB2CAN_DRIVER_MAX_OPEN; i++ )
 	 {	
-		if ( NULL == m_drvObjArray[ i ] )
+		if ( NULL == m_drvObjArray[ i ] && lpvMem[i] == 0)
 		{		
 			m_drvObjArray[ i ] = pdrvObj;	
 			h = i + 1681; 
+			lpvMem[i] = h;//inform global space that this driver opened on position i
 			break;
 	    }
 	}
@@ -146,8 +200,7 @@
 	long idx = h - 1681;
 
 	// Check if valid handle
-	if ( idx < 0 ) return NULL;
-	if ( idx >= CANAL_USB2CAN_DRIVER_MAX_OPEN ) return NULL;
+	if ( idx < 0 || idx >= CANAL_USB2CAN_DRIVER_MAX_OPEN) return NULL;
 	return m_drvObjArray[ idx ];
 }
 
@@ -161,15 +214,17 @@
 	long idx = h - 1681;
 
 	// Check if valid handle
-	if ( idx < 0 ) return;
-	if ( idx >= CANAL_USB2CAN_DRIVER_MAX_OPEN ) return;
+	if ( idx < 0 || idx >= CANAL_USB2CAN_DRIVER_MAX_OPEN) return;
 
 	LOCK_MUTEX( m_objMutex );
 
 	if ( NULL != m_drvObjArray[ idx ] )
+	{
 	  delete m_drvObjArray[ idx ];
+	}
 
 	m_drvObjArray[ idx ] = NULL;
+	lpvMem[idx] = 0;//inform global space driver on position idx closed
 
 	UNLOCK_MUTEX( m_objMutex );
 }
@@ -189,27 +244,17 @@
 
 BOOL CDllDrvObj::removeAllObjects()
 {
-	long h = 0;
-
-
 	LOCK_MUTEX( m_objMutex );
 
 	for ( int i=0; i<CANAL_USB2CAN_DRIVER_MAX_OPEN; i++ )
 	{
-	
-		if ( NULL == m_drvObjArray[ i ] )
-		{
-			
-			CUsb2canObj *pdrvObj =  getDriverObject( i );
-
-			if ( NULL != pdrvObj )
-			{ 
-				pdrvObj->close();	
-				delete m_drvObjArray[ i ];
-				m_drvObjArray[ i ] = NULL; 
-			}
+		if ( NULL != m_drvObjArray[ i ] )
+		{ 
+			m_drvObjArray[ i ]->close();	
+			delete m_drvObjArray[ i ];
+			m_drvObjArray[ i ] = NULL; 
+			lpvMem[i] = 0;//inform global space driver on position i closed
 		}
-
 	}
 
 	UNLOCK_MUTEX( m_objMutex );
