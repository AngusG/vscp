/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "../../../../common/CanalSuperWrapper.h"


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jint JNICALL Java_jcanalciJNI_get_1USE_1SHM_1INTERFACE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 0;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_get_1USE_1DLL_1INTERFACE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) 1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_new_1CCanalSuperWrapper_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *result;
    
    (void)jenv;
    (void)jcls;
    result = (CCanalSuperWrapper *)new CCanalSuperWrapper();
    
    *(CCanalSuperWrapper **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_new_1CCanalSuperWrapper_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    CCanalSuperWrapper *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result = (CCanalSuperWrapper *)new CCanalSuperWrapper(arg1);
    
    *(CCanalSuperWrapper **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_delete_1CCanalSuperWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdOpen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned long arg3 ;
    long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (unsigned long)jarg3; 
    result = (long)(arg1)->doCmdOpen(arg2,arg3);
    
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdOpen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    char *arg2 = (char *) 0 ;
    long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (long)(arg1)->doCmdOpen(arg2);
    
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdOpen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (long)(arg1)->doCmdOpen();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdClose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (bool)(arg1)->doCmdClose();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdNOOP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (bool)(arg1)->doCmdNOOP();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdGetLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    unsigned long *arg2 = (unsigned long *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(unsigned long **)&jarg2; 
    result = (bool)(arg1)->doCmdGetLevel(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (bool)(arg1)->doCmdSend(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdReceive(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (bool)(arg1)->doCmdReceive(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (int)(arg1)->doCmdDataAvailable();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatus *arg2 = (canalStatus *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatus **)&jarg2; 
    result = (bool)(arg1)->doCmdStatus(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdStatistics(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (bool)(arg1)->doCmdStatistics(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    unsigned long arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (bool)(arg1)->doCmdFilter(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    unsigned long arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (bool)(arg1)->doCmdMask(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdBaudrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    unsigned long arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = (unsigned long)jarg2; 
    result = (bool)(arg1)->doCmdBaudrate(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    unsigned long *arg2 = (unsigned long *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(unsigned long **)&jarg2; 
    result = (bool)(arg1)->doCmdVersion(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdDLLVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    unsigned long *arg2 = (unsigned long *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(unsigned long **)&jarg2; 
    result = (bool)(arg1)->doCmdDLLVersion(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1doCmdVendorString(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned short arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (unsigned short)jarg3; 
    result = (bool)(arg1)->doCmdVendorString(arg2,arg3);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1new_1canalMsg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (canalMsg *)(arg1)->new_canalMsg();
    
    *(canalMsg **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setCanalMsgId(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalMsgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalMsgId(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setCanalMsgFlags(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalMsgFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalMsgFlags(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgExtendedId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    (arg1)->setCanalMsgExtendedId(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1isCanalMsgExtendedId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (bool)(arg1)->isCanalMsgExtendedId(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgStandardId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    (arg1)->setCanalMsgStandardId(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1isCanalMsgStandardId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (bool)(arg1)->isCanalMsgStandardId(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgRemoteFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    (arg1)->setCanalMsgRemoteFrame(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1isCanalMsgRemoteFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (bool)(arg1)->isCanalMsgRemoteFrame(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgObId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setCanalMsgObId(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalObId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalObId(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgSizeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->setCanalMsgSizeData(arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalMsgSizeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    result = (int)(arg1)->getCanalMsgSizeData(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setCanalMsgData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    int arg3 ;
    int arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->setCanalMsgData(arg2,arg3,arg4);
    
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalMsgData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalMsg *arg2 = (canalMsg *) 0 ;
    int arg3 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalMsg **)&jarg2; 
    arg3 = (int)jarg3; 
    result = (int)(arg1)->getCanalMsgData(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1new_1canalStatistics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    PCANALSTATISTICS result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (arg1)->new_canalStatistics();
    
    *(PCANALSTATISTICS **)&jresult = new PCANALSTATISTICS((PCANALSTATISTICS &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalStatisticsReceiveFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalStatisticsReceiveFrames(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalStatisticsTransmitFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalStatisticsTransmitFrames(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalStatisticsReceiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalStatisticsReceiveData(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalStatisticsTransmitData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalStatisticsTransmitData(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalStatisticsOverruns(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalStatisticsOverruns(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalStatisticsBusWarnings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalStatisticsBusWarnings(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getCanalStatisticsBusOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatistics *arg2 = (canalStatistics *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatistics **)&jarg2; 
    result = (unsigned long)(arg1)->getCanalStatisticsBusOff(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1new_1canalStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    PCANALSTATUS result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (arg1)->new_canalStatus();
    
    *(PCANALSTATUS **)&jresult = new PCANALSTATUS((PCANALSTATUS &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getcanalStatusChannelStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    canalStatus *arg2 = (canalStatus *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(canalStatus **)&jarg2; 
    result = (unsigned long)(arg1)->getcanalStatusChannelStatus(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1new_1devItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    result = (devItem *)(arg1)->new_devItem();
    
    *(devItem **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->setdevItemId(arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (int)(arg1)->getdevItemId(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemRegId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->setdevItemRegId(arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemRegId(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (int)(arg1)->getdevItemRegId(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->setdevItemName(arg2,arg3);
    
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT jstring JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jstring jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (char *)(arg1)->getdevItemName(arg2);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->setdevItemPath(arg2,arg3);
    
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT jstring JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jstring jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (char *)(arg1)->getdevItemPath(arg2);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemDeviceString(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->setdevItemDeviceString(arg2,arg3);
    
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT jstring JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemDeviceString(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jstring jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (char *)(arg1)->getdevItemDeviceString(arg2);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setdevItemFlags(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (unsigned long)(arg1)->getdevItemFlags(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemInBufSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setdevItemInBufSize(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemInBufSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (unsigned long)(arg1)->getdevItemInBufSize(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemOutBufSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setdevItemOutBufSize(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemOutBufSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (unsigned long)(arg1)->getdevItemOutBufSize(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setdevItemFilter(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (unsigned long)(arg1)->getdevItemFilter(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1setdevItemMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    arg3 = (unsigned long)jarg3; 
    (arg1)->setdevItemMask(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_CCanalSuperWrapper_1getdevItemMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
    devItem *arg2 = (devItem *) 0 ;
    unsigned long result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CCanalSuperWrapper **)&jarg1; 
    arg2 = *(devItem **)&jarg2; 
    result = (unsigned long)(arg1)->getdevItemMask(arg2);
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalMsg_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->flags = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalMsg_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    result =  ((arg1)->flags);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalMsg_1obid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->obid = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalMsg_1obid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    result =  ((arg1)->obid);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalMsg_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->id = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalMsg_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    result =  ((arg1)->id);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalMsg_1sizeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u8 arg2 ;
    _u8 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    argp2 = *(_u8 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u8");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->sizeData = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalMsg_1sizeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u8 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    result =  ((arg1)->sizeData);
    
    *(_u8 **)&jresult = new _u8((_u8 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalMsg_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u8 *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    arg2 = *(_u8 **)&jarg2; 
    {
        size_t ii;
        _u8 *b = (_u8 *) arg1->data;
        for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((_u8 *) arg2 + ii);
    }
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalMsg_1data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u8 *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    result = (_u8 *)(_u8 *) ((arg1)->data);
    
    *(_u8 **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalMsg_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->timestamp = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalMsg_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalMsg *arg1 = (canalMsg *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    result =  ((arg1)->timestamp);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_new_1canalMsg(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    canalMsg *result;
    
    (void)jenv;
    (void)jcls;
    result = (canalMsg *)new canalMsg();
    
    *(canalMsg **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_delete_1canalMsg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    canalMsg *arg1 = (canalMsg *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalMsg **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatistics_1cntReceiveFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->cntReceiveFrames = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatistics_1cntReceiveFrames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    result =  ((arg1)->cntReceiveFrames);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatistics_1cntTransmitFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->cntTransmitFrames = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatistics_1cntTransmitFrames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    result =  ((arg1)->cntTransmitFrames);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatistics_1cntReceiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->cntReceiveData = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatistics_1cntReceiveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    result =  ((arg1)->cntReceiveData);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatistics_1cntTransmitData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->cntTransmitData = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatistics_1cntTransmitData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    result =  ((arg1)->cntTransmitData);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatistics_1cntOverruns(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->cntOverruns = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatistics_1cntOverruns(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    result =  ((arg1)->cntOverruns);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatistics_1cntBusWarnings(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->cntBusWarnings = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatistics_1cntBusWarnings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    result =  ((arg1)->cntBusWarnings);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatistics_1cntBusOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->cntBusOff = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatistics_1cntBusOff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    result =  ((arg1)->cntBusOff);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_new_1canalStatistics(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    canalStatistics *result;
    
    (void)jenv;
    (void)jcls;
    result = (canalStatistics *)new canalStatistics();
    
    *(canalStatistics **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_delete_1canalStatistics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    canalStatistics *arg1 = (canalStatistics *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatistics **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1canalStatus_1channel_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    canalStatus *arg1 = (canalStatus *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatus **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->channel_status = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1canalStatus_1channel_1status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    canalStatus *arg1 = (canalStatus *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatus **)&jarg1; 
    result =  ((arg1)->channel_status);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_new_1canalStatus(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    canalStatus *result;
    
    (void)jenv;
    (void)jcls;
    result = (canalStatus *)new canalStatus();
    
    *(canalStatus **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_delete_1canalStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    canalStatus *arg1 = (canalStatus *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(canalStatus **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->id = arg2;
    
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_get_1devItem_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result = (int) ((arg1)->id);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1regid(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    arg2 = (int)jarg2; 
    if (arg1) (arg1)->regid = arg2;
    
}


JNIEXPORT jint JNICALL Java_jcanalciJNI_get_1devItem_1regid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result = (int) ((arg1)->regid);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u8 *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    arg2 = *(_u8 **)&jarg2; 
    {
        size_t ii;
        _u8 *b = (_u8 *) arg1->name;
        for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((_u8 *) arg2 + ii);
    }
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u8 *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result = (_u8 *)(_u8 *) ((arg1)->name);
    
    *(_u8 **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1path(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u8 *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    arg2 = *(_u8 **)&jarg2; 
    {
        size_t ii;
        _u8 *b = (_u8 *) arg1->path;
        for (ii = 0; ii < (size_t)260; ii++) b[ii] = *((_u8 *) arg2 + ii);
    }
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1path(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u8 *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result = (_u8 *)(_u8 *) ((arg1)->path);
    
    *(_u8 **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1deviceStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u8 *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    arg2 = *(_u8 **)&jarg2; 
    {
        size_t ii;
        _u8 *b = (_u8 *) arg1->deviceStr;
        for (ii = 0; ii < (size_t)260; ii++) b[ii] = *((_u8 *) arg2 + ii);
    }
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1deviceStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u8 *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result = (_u8 *)(_u8 *) ((arg1)->deviceStr);
    
    *(_u8 **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->flags = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result =  ((arg1)->flags);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1inbufsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->inbufsize = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1inbufsize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result =  ((arg1)->inbufsize);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1outbufsize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->outbufsize = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1outbufsize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result =  ((arg1)->outbufsize);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->filter = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result =  ((arg1)->filter);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_set_1devItem_1mask(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    devItem *arg1 = (devItem *) 0 ;
    _u32 arg2 ;
    _u32 *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    argp2 = *(_u32 **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null _u32");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->mask = arg2;
    
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_get_1devItem_1mask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    devItem *arg1 = (devItem *) 0 ;
    _u32 result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    result =  ((arg1)->mask);
    
    *(_u32 **)&jresult = new _u32((_u32 &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_jcanalciJNI_new_1devItem(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    devItem *result;
    
    (void)jenv;
    (void)jcls;
    result = (devItem *)new devItem();
    
    *(devItem **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_jcanalciJNI_delete_1devItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    devItem *arg1 = (devItem *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(devItem **)&jarg1; 
    delete arg1;
    
}


#ifdef __cplusplus
}
#endif

