/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------- -*- c -*-
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvsroot/swig/SWIG/Lib/perl5/perlrun.swg,v 1.20 2004/11/29 23:13:57 wuzzeb Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Contract support */

#define SWIG_contract_assert(expr,msg) if (!(expr)) { SWIG_croak(msg); } else

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#  ifndef PL_sv_yes
#    define PL_sv_yes sv_yes
#  endif
#  ifndef PL_sv_undef
#    define PL_sv_undef sv_undef
#  endif
#  ifndef PL_na
#    define PL_na na
#  endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER 1
#define SWIG_SHADOW 2

/* Common SWIG API */

#ifdef PERL_OBJECT
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(pPerl, obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(pPerl, p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(pPerl, sv, p, s, type)
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(pPerl, obj, p, s, type, flags)

#else
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(sv, p, s, type )
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(obj, p, s, type, flags)
#endif

/* Perl-specific API */
#ifdef PERL_OBJECT
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(pPerl, sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(pPerl, str)
#else
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(str)
#  define SWIG_SetErrorSV(str) \
     SWIG_Perl_SetErrorSV(str)
#endif

#define SWIG_SetErrorf SWIG_Perl_SetErrorf


#ifdef PERL_OBJECT
#  define SWIG_MAYBE_PERL_OBJECT CPerlObj *pPerl,
#else
#  define SWIG_MAYBE_PERL_OBJECT
#endif

static swig_type_info **
SWIG_Perl_GetTypeListHandle() {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_type_info **) type_pointer;
}

/*
  Search for a swig_type_info structure
 */
SWIGRUNTIMEINLINE swig_type_info *
SWIG_Perl_GetTypeList() {
  swig_type_info **tlh = SWIG_Perl_GetTypeListHandle();
  return tlh ? *tlh : (swig_type_info*)0;
}

#define SWIG_Runtime_GetTypeList SWIG_Perl_GetTypeList 

static swig_type_info *
SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (sv_derived_from(rv, (char *) s->name)) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Function for getting a pointer value */

static int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_type_info *tc;
  void *voidptr = (void *)0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    IV tmp = 0;
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
            tmp = SvIV((SV*)SvRV(sv));
          }
        }
      } else {
        return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    voidptr = (void *)tmp;
    if (!_t) {
      *(ptr) = voidptr;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv))
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
    *(ptr) = (void *) 0;
    return -1;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeCheck(_c,_t);
    if (!tc) {
      *ptr = voidptr;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
    return 0;
  }
  *ptr = voidptr;
  return 0;
}

static void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) t->name, ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_OWNER) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) t->name, ptr);
  }
}

static SWIGINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

static void
  SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  sv_setpv(sv, result);
}

/* Convert a packed value value */
static int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return -1;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return -1;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return -1;
  }
  return 0;
}

static SWIGINLINE void
SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT const char *error) {
  if (error) sv_setpv(perl_get_sv("@", TRUE), error);
}

static SWIGINLINE void
SWIG_Perl_SetErrorSV(SWIG_MAYBE_PERL_OBJECT SV *error) {
  if (error) sv_setsv(perl_get_sv("@", TRUE), error);
}

static void
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

/* Macros for low-level exception handling */
#define SWIG_fail       goto fail
#define SWIG_croak(x)   { SWIG_SetError(x); goto fail; }
#define SWIG_croakSV(x) { SWIG_SetErrorSV(x); goto fail; }
/* most preprocessors do not support vararg macros :-( */
/* #define SWIG_croakf(x...) { SWIG_SetErrorf(x); goto fail; } */


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
  #else
     static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) {
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}






#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef ENTER
  #undef ENTER
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_canalStatus swig_types[0] 
#define  SWIGTYPE_p_canalStatistics swig_types[1] 
#define  SWIGTYPE_p_PCANALSTATISTICS swig_types[2] 
#define  SWIGTYPE_p_unsigned_long swig_types[3] 
#define  SWIGTYPE_p_PCANALSTATUS swig_types[4] 
#define  SWIGTYPE_p_Square swig_types[5] 
#define  SWIGTYPE_p_Shape swig_types[6] 
#define  SWIGTYPE_p_canalMsg swig_types[7] 
#define  SWIGTYPE_p_CCanalSuperWrapper swig_types[8] 
#define  SWIGTYPE_p_Circle swig_types[9] 
#define  SWIGTYPE_p_devItem swig_types[10] 
static swig_type_info *swig_types[12];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_perl_cci

#define SWIG_name   "perl_ccic::boot_perl_cci"
#define SWIG_prefix "perl_ccic::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT(void) SWIG_init (CV* cv);
#else
SWIGEXPORT(void) SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT(void) SWIG_init (CV *cv, CPerlObj *);
#endif


#include "../../../../common/CanalSuperWrapper.h"
#include "perl_cci.h"

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_perl_cci_var::
class _wrap_perl_cci_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_set_Shape_nshapes(pTHX_ SV* sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    Shape::nshapes = (int) SvIV(sv);
    return 1;
}


SWIGCLASS_STATIC int _wrap_val_Shape_nshapes(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    mg = mg;
    sv_setiv(sv, (IV) Shape::nshapes);
    return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_new_CCanalSuperWrapper__SWIG_0) {
    {
        CCanalSuperWrapper *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: new_CCanalSuperWrapper();");
        }
        result = (CCanalSuperWrapper *)new CCanalSuperWrapper();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_CCanalSuperWrapper, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCanalSuperWrapper__SWIG_1) {
    {
        devItem *arg1 = (devItem *) 0 ;
        CCanalSuperWrapper *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_CCanalSuperWrapper(pItem);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_CCanalSuperWrapper. Expected _p_devItem");
            }
        }
        result = (CCanalSuperWrapper *)new CCanalSuperWrapper(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_CCanalSuperWrapper, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CCanalSuperWrapper) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CCanalSuperWrapper__SWIG_0); return;
    }
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_devItem, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_new_CCanalSuperWrapper__SWIG_1); return;
        }
    }
    
    croak("No matching function for overloaded 'new_CCanalSuperWrapper'");
    XSRETURN(0);
}


XS(_wrap_delete_CCanalSuperWrapper) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CCanalSuperWrapper(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CCanalSuperWrapper. Expected _p_CCanalSuperWrapper");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdOpen__SWIG_0) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        char *arg2 = (char *) 0 ;
        unsigned long arg3 ;
        long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdOpen(self,szInterface,flags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdOpen. Expected _p_CCanalSuperWrapper");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (unsigned long) SvUV(ST(2));
        result = (long)(arg1)->doCmdOpen(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdOpen__SWIG_1) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        char *arg2 = (char *) 0 ;
        long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdOpen(self,szInterface);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdOpen. Expected _p_CCanalSuperWrapper");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (long)(arg1)->doCmdOpen(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdOpen__SWIG_2) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdOpen(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdOpen. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (long)(arg1)->doCmdOpen();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdOpen) {
    dXSARGS;
    
    if (items == 1) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_CCanalSuperWrapper, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCanalSuperWrapper_doCmdOpen__SWIG_2); return;
        }
    }
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_CCanalSuperWrapper, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCanalSuperWrapper_doCmdOpen__SWIG_1); return;
            }
        }
    }
    if (items == 3) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_CCanalSuperWrapper, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvPOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CCanalSuperWrapper_doCmdOpen__SWIG_0); return;
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CCanalSuperWrapper_doCmdOpen'");
    XSRETURN(0);
}


XS(_wrap_CCanalSuperWrapper_doCmdClose) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdClose(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdClose. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (bool)(arg1)->doCmdClose();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdNOOP) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdNOOP(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdNOOP. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (bool)(arg1)->doCmdNOOP();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdGetLevel) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        unsigned long *arg2 = (unsigned long *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdGetLevel(self,plevel);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdGetLevel. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_long,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_doCmdGetLevel. Expected _p_unsigned_long");
            }
        }
        result = (bool)(arg1)->doCmdGetLevel(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdSend) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdSend(self,pMsg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdSend. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_doCmdSend. Expected _p_canalMsg");
            }
        }
        result = (bool)(arg1)->doCmdSend(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdReceive) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdReceive(self,pMsg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdReceive. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_doCmdReceive. Expected _p_canalMsg");
            }
        }
        result = (bool)(arg1)->doCmdReceive(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdDataAvailable) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdDataAvailable(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdDataAvailable. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (int)(arg1)->doCmdDataAvailable();
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdStatus) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatus *arg2 = (canalStatus *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdStatus(self,pStatus);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdStatus. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatus,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_doCmdStatus. Expected _p_canalStatus");
            }
        }
        result = (bool)(arg1)->doCmdStatus(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdStatistics) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdStatistics(self,pStatistics);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdStatistics. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_doCmdStatistics. Expected _p_canalStatistics");
            }
        }
        result = (bool)(arg1)->doCmdStatistics(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdFilter) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        unsigned long arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdFilter(self,filter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdFilter. Expected _p_CCanalSuperWrapper");
            }
        }
        arg2 = (unsigned long) SvUV(ST(1));
        result = (bool)(arg1)->doCmdFilter(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdMask) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        unsigned long arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdMask(self,mask);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdMask. Expected _p_CCanalSuperWrapper");
            }
        }
        arg2 = (unsigned long) SvUV(ST(1));
        result = (bool)(arg1)->doCmdMask(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdBaudrate) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        unsigned long arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdBaudrate(self,baudrate);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdBaudrate. Expected _p_CCanalSuperWrapper");
            }
        }
        arg2 = (unsigned long) SvUV(ST(1));
        result = (bool)(arg1)->doCmdBaudrate(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdVersion) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        unsigned long *arg2 = (unsigned long *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdVersion(self,pversion);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdVersion. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_long,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_doCmdVersion. Expected _p_unsigned_long");
            }
        }
        result = (bool)(arg1)->doCmdVersion(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdDLLVersion) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        unsigned long *arg2 = (unsigned long *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdDLLVersion(self,pversion);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdDLLVersion. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_unsigned_long,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_doCmdDLLVersion. Expected _p_unsigned_long");
            }
        }
        result = (bool)(arg1)->doCmdDLLVersion(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_doCmdVendorString) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        char *arg2 = (char *) 0 ;
        unsigned short arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_doCmdVendorString(self,pVendorStr,maxsize);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_doCmdVendorString. Expected _p_CCanalSuperWrapper");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (unsigned short) SvUV(ST(2));
        result = (bool)(arg1)->doCmdVendorString(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_new_canalMsg) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_new_canalMsg(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_new_canalMsg. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (canalMsg *)(arg1)->new_canalMsg();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_canalMsg, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgId(self,p,id);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgId. Expected _p_canalMsg");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setCanalMsgId(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalMsgId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalMsgId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalMsgId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalMsgId. Expected _p_canalMsg");
            }
        }
        result = (unsigned long)(arg1)->getCanalMsgId(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgFlags) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgFlags(self,p,flags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgFlags. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgFlags. Expected _p_canalMsg");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setCanalMsgFlags(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalMsgFlags) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalMsgFlags(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalMsgFlags. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalMsgFlags. Expected _p_canalMsg");
            }
        }
        result = (unsigned long)(arg1)->getCanalMsgFlags(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgExtendedId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgExtendedId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgExtendedId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgExtendedId. Expected _p_canalMsg");
            }
        }
        (arg1)->setCanalMsgExtendedId(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_isCanalMsgExtendedId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_isCanalMsgExtendedId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_isCanalMsgExtendedId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_isCanalMsgExtendedId. Expected _p_canalMsg");
            }
        }
        result = (bool)(arg1)->isCanalMsgExtendedId(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgStandardId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgStandardId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgStandardId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgStandardId. Expected _p_canalMsg");
            }
        }
        (arg1)->setCanalMsgStandardId(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_isCanalMsgStandardId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_isCanalMsgStandardId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_isCanalMsgStandardId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_isCanalMsgStandardId. Expected _p_canalMsg");
            }
        }
        result = (bool)(arg1)->isCanalMsgStandardId(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgRemoteFrame) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgRemoteFrame(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgRemoteFrame. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgRemoteFrame. Expected _p_canalMsg");
            }
        }
        (arg1)->setCanalMsgRemoteFrame(arg2);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_isCanalMsgRemoteFrame) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_isCanalMsgRemoteFrame(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_isCanalMsgRemoteFrame. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_isCanalMsgRemoteFrame. Expected _p_canalMsg");
            }
        }
        result = (bool)(arg1)->isCanalMsgRemoteFrame(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgObId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgObId(self,p,obid);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgObId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgObId. Expected _p_canalMsg");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setCanalMsgObId(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalObId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalObId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalObId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalObId. Expected _p_canalMsg");
            }
        }
        result = (unsigned long)(arg1)->getCanalObId(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgSizeData) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgSizeData(self,p,size);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgSizeData. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgSizeData. Expected _p_canalMsg");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setCanalMsgSizeData(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalMsgSizeData) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalMsgSizeData(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalMsgSizeData. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalMsgSizeData. Expected _p_canalMsg");
            }
        }
        result = (unsigned char)(arg1)->getCanalMsgSizeData(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setCanalMsgData) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned char arg3 ;
        unsigned char arg4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setCanalMsgData(self,p,pos,data);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setCanalMsgData. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setCanalMsgData. Expected _p_canalMsg");
            }
        }
        arg3 = (unsigned char) SvUV(ST(2));
        arg4 = (unsigned char) SvUV(ST(3));
        (arg1)->setCanalMsgData(arg2,arg3,arg4);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalMsgData) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalMsg *arg2 = (canalMsg *) 0 ;
        unsigned char arg3 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalMsgData(self,p,pos);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalMsgData. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalMsg,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalMsgData. Expected _p_canalMsg");
            }
        }
        arg3 = (unsigned char) SvUV(ST(2));
        result = (unsigned char)(arg1)->getCanalMsgData(arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_new_canalStatistics) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        PCANALSTATISTICS result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_new_canalStatistics(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_new_canalStatistics. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (arg1)->new_canalStatistics();
        
        {
            PCANALSTATISTICS * resultobj = new PCANALSTATISTICS((PCANALSTATISTICS &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PCANALSTATISTICS, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalStatisticsReceiveFrames) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalStatisticsReceiveFrames(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalStatisticsReceiveFrames. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalStatisticsReceiveFrames. Expected _p_canalStatistics");
            }
        }
        result = (unsigned char)(arg1)->getCanalStatisticsReceiveFrames(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalStatisticsTransmitFrames) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalStatisticsTransmitFrames(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalStatisticsTransmitFrames. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalStatisticsTransmitFrames. Expected _p_canalStatistics");
            }
        }
        result = (unsigned char)(arg1)->getCanalStatisticsTransmitFrames(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalStatisticsReceiveData) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalStatisticsReceiveData(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalStatisticsReceiveData. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalStatisticsReceiveData. Expected _p_canalStatistics");
            }
        }
        result = (unsigned char)(arg1)->getCanalStatisticsReceiveData(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalStatisticsTransmitData) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalStatisticsTransmitData(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalStatisticsTransmitData. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalStatisticsTransmitData. Expected _p_canalStatistics");
            }
        }
        result = (unsigned char)(arg1)->getCanalStatisticsTransmitData(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalStatisticsOverruns) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalStatisticsOverruns(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalStatisticsOverruns. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalStatisticsOverruns. Expected _p_canalStatistics");
            }
        }
        result = (unsigned char)(arg1)->getCanalStatisticsOverruns(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalStatisticsBusWarnings) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalStatisticsBusWarnings(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalStatisticsBusWarnings. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalStatisticsBusWarnings. Expected _p_canalStatistics");
            }
        }
        result = (unsigned char)(arg1)->getCanalStatisticsBusWarnings(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getCanalStatisticsBusOff) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatistics *arg2 = (canalStatistics *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getCanalStatisticsBusOff(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getCanalStatisticsBusOff. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatistics,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getCanalStatisticsBusOff. Expected _p_canalStatistics");
            }
        }
        result = (unsigned char)(arg1)->getCanalStatisticsBusOff(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_new_canalStatus) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        PCANALSTATUS result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_new_canalStatus(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_new_canalStatus. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (arg1)->new_canalStatus();
        
        {
            PCANALSTATUS * resultobj = new PCANALSTATUS((PCANALSTATUS &)result);
            ST(argvi) = sv_newmortal();
            SWIG_MakePtr(ST(argvi++), (void *) resultobj, SWIGTYPE_p_PCANALSTATUS, 0|SWIG_OWNER);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getcanalStatusChannelStatus) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        canalStatus *arg2 = (canalStatus *) 0 ;
        unsigned char result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getcanalStatusChannelStatus(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getcanalStatusChannelStatus. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_canalStatus,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getcanalStatusChannelStatus. Expected _p_canalStatus");
            }
        }
        result = (unsigned char)(arg1)->getcanalStatusChannelStatus(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_new_devItem) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CCanalSuperWrapper_new_devItem(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_new_devItem. Expected _p_CCanalSuperWrapper");
            }
        }
        result = (devItem *)(arg1)->new_devItem();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_devItem, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemId(self,p,id);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemId. Expected _p_devItem");
            }
        }
        arg3 = (int) SvIV(ST(2));
        (arg1)->setdevItemId(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemId. Expected _p_devItem");
            }
        }
        result = (int)(arg1)->getdevItemId(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemRegId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        int arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemRegId(self,p,id);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemRegId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemRegId. Expected _p_devItem");
            }
        }
        arg3 = (int) SvIV(ST(2));
        (arg1)->setdevItemRegId(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemRegId) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemRegId(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemRegId. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemRegId. Expected _p_devItem");
            }
        }
        result = (int)(arg1)->getdevItemRegId(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemName) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        char *arg3 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemName(self,p,pname);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemName. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemName. Expected _p_devItem");
            }
        }
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        (arg1)->setdevItemName(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemName) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemName(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemName. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemName. Expected _p_devItem");
            }
        }
        result = (char *)(arg1)->getdevItemName(arg2);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemPath) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        char *arg3 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemPath(self,p,pdeviceStr);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemPath. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemPath. Expected _p_devItem");
            }
        }
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        (arg1)->setdevItemPath(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemPath) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemPath(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemPath. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemPath. Expected _p_devItem");
            }
        }
        result = (char *)(arg1)->getdevItemPath(arg2);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemDeviceString) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        char *arg3 = (char *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemDeviceString(self,p,ppath);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemDeviceString. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemDeviceString. Expected _p_devItem");
            }
        }
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        (arg1)->setdevItemDeviceString(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemDeviceString) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemDeviceString(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemDeviceString. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemDeviceString. Expected _p_devItem");
            }
        }
        result = (char *)(arg1)->getdevItemDeviceString(arg2);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemFlags) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemFlags(self,p,flags);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemFlags. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemFlags. Expected _p_devItem");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setdevItemFlags(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemFlags) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemFlags(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemFlags. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemFlags. Expected _p_devItem");
            }
        }
        result = (unsigned long)(arg1)->getdevItemFlags(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemInBufSize) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemInBufSize(self,p,inbufsize);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemInBufSize. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemInBufSize. Expected _p_devItem");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setdevItemInBufSize(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemInBufSize) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemInBufSize(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemInBufSize. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemInBufSize. Expected _p_devItem");
            }
        }
        result = (unsigned long)(arg1)->getdevItemInBufSize(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemOutBufSize) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemOutBufSize(self,p,outbufsize);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemOutBufSize. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemOutBufSize. Expected _p_devItem");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setdevItemOutBufSize(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemOutBufSize) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemOutBufSize(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemOutBufSize. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemOutBufSize. Expected _p_devItem");
            }
        }
        result = (unsigned long)(arg1)->getdevItemOutBufSize(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemFilter) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemFilter(self,p,filter);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemFilter. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemFilter. Expected _p_devItem");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setdevItemFilter(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemFilter) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemFilter(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemFilter. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemFilter. Expected _p_devItem");
            }
        }
        result = (unsigned long)(arg1)->getdevItemFilter(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_setdevItemMask) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CCanalSuperWrapper_setdevItemMask(self,p,mask);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_setdevItemMask. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_setdevItemMask. Expected _p_devItem");
            }
        }
        arg3 = (unsigned long) SvUV(ST(2));
        (arg1)->setdevItemMask(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CCanalSuperWrapper_getdevItemMask) {
    {
        CCanalSuperWrapper *arg1 = (CCanalSuperWrapper *) 0 ;
        devItem *arg2 = (devItem *) 0 ;
        unsigned long result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CCanalSuperWrapper_getdevItemMask(self,p);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_CCanalSuperWrapper,0) < 0) {
                SWIG_croak("Type error in argument 1 of CCanalSuperWrapper_getdevItemMask. Expected _p_CCanalSuperWrapper");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_devItem,0) < 0) {
                SWIG_croak("Type error in argument 2 of CCanalSuperWrapper_getdevItemMask. Expected _p_devItem");
            }
        }
        result = (unsigned long)(arg1)->getdevItemMask(arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setuv(ST(argvi++), (UV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Shape) {
    {
        Shape *arg1 = (Shape *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Shape(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Shape. Expected _p_Shape");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Shape_x_set) {
    {
        Shape *arg1 = (Shape *) 0 ;
        double arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Shape_x_set(self,x);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of Shape_x_set. Expected _p_Shape");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        if (arg1) (arg1)->x = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Shape_x_get) {
    {
        Shape *arg1 = (Shape *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Shape_x_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of Shape_x_get. Expected _p_Shape");
            }
        }
        result = (double) ((arg1)->x);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Shape_y_set) {
    {
        Shape *arg1 = (Shape *) 0 ;
        double arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Shape_y_set(self,y);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of Shape_y_set. Expected _p_Shape");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        if (arg1) (arg1)->y = arg2;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Shape_y_get) {
    {
        Shape *arg1 = (Shape *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Shape_y_get(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of Shape_y_get. Expected _p_Shape");
            }
        }
        result = (double) ((arg1)->y);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Shape_move) {
    {
        Shape *arg1 = (Shape *) 0 ;
        double arg2 ;
        double arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: Shape_move(self,dx,dy);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of Shape_move. Expected _p_Shape");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        (arg1)->move(arg2,arg3);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Shape_area) {
    {
        Shape *arg1 = (Shape *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Shape_area(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of Shape_area. Expected _p_Shape");
            }
        }
        result = (double)(arg1)->area();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Shape_perimeter) {
    {
        Shape *arg1 = (Shape *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Shape_perimeter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Shape,0) < 0) {
                SWIG_croak("Type error in argument 1 of Shape_perimeter. Expected _p_Shape");
            }
        }
        result = (double)(arg1)->perimeter();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Circle) {
    {
        double arg1 ;
        Circle *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_Circle(r);");
        }
        arg1 = (double) SvNV(ST(0));
        
        result = (Circle *)new Circle(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_Circle, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Circle_area) {
    {
        Circle *arg1 = (Circle *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Circle_area(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Circle,0) < 0) {
                SWIG_croak("Type error in argument 1 of Circle_area. Expected _p_Circle");
            }
        }
        result = (double)(arg1)->area();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Circle_perimeter) {
    {
        Circle *arg1 = (Circle *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Circle_perimeter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Circle,0) < 0) {
                SWIG_croak("Type error in argument 1 of Circle_perimeter. Expected _p_Circle");
            }
        }
        result = (double)(arg1)->perimeter();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Circle) {
    {
        Circle *arg1 = (Circle *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Circle(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Circle,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Circle. Expected _p_Circle");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_Square) {
    {
        double arg1 ;
        Square *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: new_Square(w);");
        }
        arg1 = (double) SvNV(ST(0));
        
        result = (Square *)new Square(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_Square, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Square_area) {
    {
        Square *arg1 = (Square *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Square_area(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Square,0) < 0) {
                SWIG_croak("Type error in argument 1 of Square_area. Expected _p_Square");
            }
        }
        result = (double)(arg1)->area();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_Square_perimeter) {
    {
        Square *arg1 = (Square *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: Square_perimeter(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Square,0) < 0) {
                SWIG_croak("Type error in argument 1 of Square_perimeter. Expected _p_Square");
            }
        }
        result = (double)(arg1)->perimeter();
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_Square) {
    {
        Square *arg1 = (Square *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_Square(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_Square,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_Square. Expected _p_Square");
            }
        }
        delete arg1;
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SquareTo_p_Shape(void *x) {
    return (void *)((Shape *)  ((Square *) x));
}
static void *_p_CircleTo_p_Shape(void *x) {
    return (void *)((Shape *)  ((Circle *) x));
}
static swig_type_info _swigt__p_canalStatus[] = {{"_p_canalStatus", 0, "canalStatus *", 0, 0, 0, 0},{"_p_canalStatus", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_canalStatistics[] = {{"_p_canalStatistics", 0, "canalStatistics *", 0, 0, 0, 0},{"_p_canalStatistics", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PCANALSTATISTICS[] = {{"_p_PCANALSTATISTICS", 0, "PCANALSTATISTICS *", 0, 0, 0, 0},{"_p_PCANALSTATISTICS", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_long[] = {{"_p_unsigned_long", 0, "unsigned long *", 0, 0, 0, 0},{"_p_unsigned_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_PCANALSTATUS[] = {{"_p_PCANALSTATUS", 0, "PCANALSTATUS *", 0, 0, 0, 0},{"_p_PCANALSTATUS", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Square[] = {{"perl_cci::Square", 0, "Square *", 0, 0, 0, 0},{"perl_cci::Square", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Shape[] = {{"perl_cci::Shape", 0, "Shape *", 0, 0, 0, 0},{"perl_cci::Square", _p_SquareTo_p_Shape, 0, 0, 0, 0, 0},{"perl_cci::Shape", 0, 0, 0, 0, 0, 0},{"perl_cci::Circle", _p_CircleTo_p_Shape, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_canalMsg[] = {{"_p_canalMsg", 0, "canalMsg *", 0, 0, 0, 0},{"_p_canalMsg", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CCanalSuperWrapper[] = {{"perl_cci::CCanalSuperWrapper", 0, "CCanalSuperWrapper *", 0, 0, 0, 0},{"perl_cci::CCanalSuperWrapper", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Circle[] = {{"perl_cci::Circle", 0, "Circle *", 0, 0, 0, 0},{"perl_cci::Circle", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_devItem[] = {{"_p_devItem", 0, "devItem *", 0, 0, 0, 0},{"_p_devItem", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_canalStatus, 
_swigt__p_canalStatistics, 
_swigt__p_PCANALSTATISTICS, 
_swigt__p_unsigned_long, 
_swigt__p_PCANALSTATUS, 
_swigt__p_Square, 
_swigt__p_Shape, 
_swigt__p_canalMsg, 
_swigt__p_CCanalSuperWrapper, 
_swigt__p_Circle, 
_swigt__p_devItem, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{ SWIG_INT,     (char *) SWIG_prefix "USE_SHM_INTERFACE", (long) 0, 0, 0, 0},
{ SWIG_INT,     (char *) SWIG_prefix "USE_DLL_INTERFACE", (long) 1, 0, 0, 0},
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "perl_ccic::Shape_nshapes", MAGIC_CLASS _wrap_set_Shape_nshapes, MAGIC_CLASS _wrap_val_Shape_nshapes,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"perl_ccic::new_CCanalSuperWrapper", _wrap_new_CCanalSuperWrapper},
{"perl_ccic::delete_CCanalSuperWrapper", _wrap_delete_CCanalSuperWrapper},
{"perl_ccic::CCanalSuperWrapper_doCmdOpen", _wrap_CCanalSuperWrapper_doCmdOpen},
{"perl_ccic::CCanalSuperWrapper_doCmdClose", _wrap_CCanalSuperWrapper_doCmdClose},
{"perl_ccic::CCanalSuperWrapper_doCmdNOOP", _wrap_CCanalSuperWrapper_doCmdNOOP},
{"perl_ccic::CCanalSuperWrapper_doCmdGetLevel", _wrap_CCanalSuperWrapper_doCmdGetLevel},
{"perl_ccic::CCanalSuperWrapper_doCmdSend", _wrap_CCanalSuperWrapper_doCmdSend},
{"perl_ccic::CCanalSuperWrapper_doCmdReceive", _wrap_CCanalSuperWrapper_doCmdReceive},
{"perl_ccic::CCanalSuperWrapper_doCmdDataAvailable", _wrap_CCanalSuperWrapper_doCmdDataAvailable},
{"perl_ccic::CCanalSuperWrapper_doCmdStatus", _wrap_CCanalSuperWrapper_doCmdStatus},
{"perl_ccic::CCanalSuperWrapper_doCmdStatistics", _wrap_CCanalSuperWrapper_doCmdStatistics},
{"perl_ccic::CCanalSuperWrapper_doCmdFilter", _wrap_CCanalSuperWrapper_doCmdFilter},
{"perl_ccic::CCanalSuperWrapper_doCmdMask", _wrap_CCanalSuperWrapper_doCmdMask},
{"perl_ccic::CCanalSuperWrapper_doCmdBaudrate", _wrap_CCanalSuperWrapper_doCmdBaudrate},
{"perl_ccic::CCanalSuperWrapper_doCmdVersion", _wrap_CCanalSuperWrapper_doCmdVersion},
{"perl_ccic::CCanalSuperWrapper_doCmdDLLVersion", _wrap_CCanalSuperWrapper_doCmdDLLVersion},
{"perl_ccic::CCanalSuperWrapper_doCmdVendorString", _wrap_CCanalSuperWrapper_doCmdVendorString},
{"perl_ccic::CCanalSuperWrapper_new_canalMsg", _wrap_CCanalSuperWrapper_new_canalMsg},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgId", _wrap_CCanalSuperWrapper_setCanalMsgId},
{"perl_ccic::CCanalSuperWrapper_getCanalMsgId", _wrap_CCanalSuperWrapper_getCanalMsgId},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgFlags", _wrap_CCanalSuperWrapper_setCanalMsgFlags},
{"perl_ccic::CCanalSuperWrapper_getCanalMsgFlags", _wrap_CCanalSuperWrapper_getCanalMsgFlags},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgExtendedId", _wrap_CCanalSuperWrapper_setCanalMsgExtendedId},
{"perl_ccic::CCanalSuperWrapper_isCanalMsgExtendedId", _wrap_CCanalSuperWrapper_isCanalMsgExtendedId},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgStandardId", _wrap_CCanalSuperWrapper_setCanalMsgStandardId},
{"perl_ccic::CCanalSuperWrapper_isCanalMsgStandardId", _wrap_CCanalSuperWrapper_isCanalMsgStandardId},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgRemoteFrame", _wrap_CCanalSuperWrapper_setCanalMsgRemoteFrame},
{"perl_ccic::CCanalSuperWrapper_isCanalMsgRemoteFrame", _wrap_CCanalSuperWrapper_isCanalMsgRemoteFrame},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgObId", _wrap_CCanalSuperWrapper_setCanalMsgObId},
{"perl_ccic::CCanalSuperWrapper_getCanalObId", _wrap_CCanalSuperWrapper_getCanalObId},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgSizeData", _wrap_CCanalSuperWrapper_setCanalMsgSizeData},
{"perl_ccic::CCanalSuperWrapper_getCanalMsgSizeData", _wrap_CCanalSuperWrapper_getCanalMsgSizeData},
{"perl_ccic::CCanalSuperWrapper_setCanalMsgData", _wrap_CCanalSuperWrapper_setCanalMsgData},
{"perl_ccic::CCanalSuperWrapper_getCanalMsgData", _wrap_CCanalSuperWrapper_getCanalMsgData},
{"perl_ccic::CCanalSuperWrapper_new_canalStatistics", _wrap_CCanalSuperWrapper_new_canalStatistics},
{"perl_ccic::CCanalSuperWrapper_getCanalStatisticsReceiveFrames", _wrap_CCanalSuperWrapper_getCanalStatisticsReceiveFrames},
{"perl_ccic::CCanalSuperWrapper_getCanalStatisticsTransmitFrames", _wrap_CCanalSuperWrapper_getCanalStatisticsTransmitFrames},
{"perl_ccic::CCanalSuperWrapper_getCanalStatisticsReceiveData", _wrap_CCanalSuperWrapper_getCanalStatisticsReceiveData},
{"perl_ccic::CCanalSuperWrapper_getCanalStatisticsTransmitData", _wrap_CCanalSuperWrapper_getCanalStatisticsTransmitData},
{"perl_ccic::CCanalSuperWrapper_getCanalStatisticsOverruns", _wrap_CCanalSuperWrapper_getCanalStatisticsOverruns},
{"perl_ccic::CCanalSuperWrapper_getCanalStatisticsBusWarnings", _wrap_CCanalSuperWrapper_getCanalStatisticsBusWarnings},
{"perl_ccic::CCanalSuperWrapper_getCanalStatisticsBusOff", _wrap_CCanalSuperWrapper_getCanalStatisticsBusOff},
{"perl_ccic::CCanalSuperWrapper_new_canalStatus", _wrap_CCanalSuperWrapper_new_canalStatus},
{"perl_ccic::CCanalSuperWrapper_getcanalStatusChannelStatus", _wrap_CCanalSuperWrapper_getcanalStatusChannelStatus},
{"perl_ccic::CCanalSuperWrapper_new_devItem", _wrap_CCanalSuperWrapper_new_devItem},
{"perl_ccic::CCanalSuperWrapper_setdevItemId", _wrap_CCanalSuperWrapper_setdevItemId},
{"perl_ccic::CCanalSuperWrapper_getdevItemId", _wrap_CCanalSuperWrapper_getdevItemId},
{"perl_ccic::CCanalSuperWrapper_setdevItemRegId", _wrap_CCanalSuperWrapper_setdevItemRegId},
{"perl_ccic::CCanalSuperWrapper_getdevItemRegId", _wrap_CCanalSuperWrapper_getdevItemRegId},
{"perl_ccic::CCanalSuperWrapper_setdevItemName", _wrap_CCanalSuperWrapper_setdevItemName},
{"perl_ccic::CCanalSuperWrapper_getdevItemName", _wrap_CCanalSuperWrapper_getdevItemName},
{"perl_ccic::CCanalSuperWrapper_setdevItemPath", _wrap_CCanalSuperWrapper_setdevItemPath},
{"perl_ccic::CCanalSuperWrapper_getdevItemPath", _wrap_CCanalSuperWrapper_getdevItemPath},
{"perl_ccic::CCanalSuperWrapper_setdevItemDeviceString", _wrap_CCanalSuperWrapper_setdevItemDeviceString},
{"perl_ccic::CCanalSuperWrapper_getdevItemDeviceString", _wrap_CCanalSuperWrapper_getdevItemDeviceString},
{"perl_ccic::CCanalSuperWrapper_setdevItemFlags", _wrap_CCanalSuperWrapper_setdevItemFlags},
{"perl_ccic::CCanalSuperWrapper_getdevItemFlags", _wrap_CCanalSuperWrapper_getdevItemFlags},
{"perl_ccic::CCanalSuperWrapper_setdevItemInBufSize", _wrap_CCanalSuperWrapper_setdevItemInBufSize},
{"perl_ccic::CCanalSuperWrapper_getdevItemInBufSize", _wrap_CCanalSuperWrapper_getdevItemInBufSize},
{"perl_ccic::CCanalSuperWrapper_setdevItemOutBufSize", _wrap_CCanalSuperWrapper_setdevItemOutBufSize},
{"perl_ccic::CCanalSuperWrapper_getdevItemOutBufSize", _wrap_CCanalSuperWrapper_getdevItemOutBufSize},
{"perl_ccic::CCanalSuperWrapper_setdevItemFilter", _wrap_CCanalSuperWrapper_setdevItemFilter},
{"perl_ccic::CCanalSuperWrapper_getdevItemFilter", _wrap_CCanalSuperWrapper_getdevItemFilter},
{"perl_ccic::CCanalSuperWrapper_setdevItemMask", _wrap_CCanalSuperWrapper_setdevItemMask},
{"perl_ccic::CCanalSuperWrapper_getdevItemMask", _wrap_CCanalSuperWrapper_getdevItemMask},
{"perl_ccic::delete_Shape", _wrap_delete_Shape},
{"perl_ccic::Shape_x_set", _wrap_Shape_x_set},
{"perl_ccic::Shape_x_get", _wrap_Shape_x_get},
{"perl_ccic::Shape_y_set", _wrap_Shape_y_set},
{"perl_ccic::Shape_y_get", _wrap_Shape_y_get},
{"perl_ccic::Shape_move", _wrap_Shape_move},
{"perl_ccic::Shape_area", _wrap_Shape_area},
{"perl_ccic::Shape_perimeter", _wrap_Shape_perimeter},
{"perl_ccic::new_Circle", _wrap_new_Circle},
{"perl_ccic::Circle_area", _wrap_Circle_area},
{"perl_ccic::Circle_perimeter", _wrap_Circle_perimeter},
{"perl_ccic::delete_Circle", _wrap_delete_Circle},
{"perl_ccic::new_Square", _wrap_new_Square},
{"perl_ccic::Square_area", _wrap_Square_area},
{"perl_ccic::Square_perimeter", _wrap_Square_perimeter},
{"perl_ccic::delete_Square", _wrap_delete_Square},
{0,0}
};


static void SWIG_Perl_SetTypeListHandle(swig_type_info **handle) {
    SV *pointer;
    
    /* create a new pointer */
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE);
    sv_setiv(pointer, PTR2IV(swig_type_list_handle));
}

static swig_type_info **
SWIG_Perl_LookupTypePointer(swig_type_info **type_list_handle) {
    swig_type_info **type_pointer;
    
    /* first check if module already created */
    type_pointer = SWIG_Perl_GetTypeListHandle();
    if (type_pointer) {
        return type_pointer;
    } else {
        /* create a new module and variable */
        SWIG_Perl_SetTypeListHandle(type_list_handle);
        return type_list_handle;
    }
}


#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    static int _init = 0;
    if (!_init) {
        swig_type_list_handle = SWIG_Perl_LookupTypePointer(swig_type_list_handle);
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }	
        _init = 1;
    }
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        } else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    SWIG_TypeClientData(SWIGTYPE_p_CCanalSuperWrapper, (void*) "perl_cci::CCanalSuperWrapper");
    SWIG_TypeClientData(SWIGTYPE_p_Shape, (void*) "perl_cci::Shape");
    SWIG_TypeClientData(SWIGTYPE_p_Circle, (void*) "perl_cci::Circle");
    SWIG_TypeClientData(SWIGTYPE_p_Square, (void*) "perl_cci::Square");
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

